(i hope that this version wont be awful as piervous 1)
File system documentation:
	Naming convention:
		up = user permisions
		op = other users permisions
		uid = user id
		acl = acces control list

	Systems:
		numierical permision system:
			4 read permision
			2 write permision
			1 execute permision(for now this is useless)
			
			Examples:
				4 Read Only
				2 Write only
				6 Read and Write
				7 Read write and Execute		
		uid system:
			each user should have diffrent uid.
			user with UID 0 is root so permisions 
			does not apply to him(to be implemented)
		
			unique UID generation should be implemented in user system
		permison system:
			up:
				owner permison to file/directory
			op:
				permisons that other users have to directroy
	Classes:
		AC:
			Varables:
				up: int
				op: int
				uid: int
		ACL:
			diconary of AC indexed trought file name
			it is saved in xml format in file named acl.xml
			
			Example acl.xml:
				<acl>
					<user1>
						<up>6</up>
						<op>0</op>
						<uid>1</uid>
					</user1>
					<user2>
						<up>6</up>
						<op>0</op>
						<uid>2</uid>
					</user2>
					<yay>
						<up>6</up>
						<op>0</op>
						<uid>2</uid>
					</yay>
				</acl>
			in this case acl.xml describes 3 files/directoires user1 user2 and yay
			user1 is owned by user with UID of 1 and user2 with user with UID 2
			who is also owner of yay
			
			<up>6</up> Describes user permisions so in ths case Read Write
			<op>0</op> Describes other users permisions in this case none
			<uid></uid> Describes UID of owner
		
			IMPORTANT:
				to make file system work and detect files in each directory of "OS" disk should be such file
		Directroy:
			IMPORTANT FOR Fungus
			functions:
				mkdir(user: User, name: String): creates directory
				touch(user: User, name: String): creates file
				rm(user: User, name: String): removes file/directory
				ls(user: User) -> diconary of dirs and files: lists directory
				chmod(user: User, up: int, op: int): changes permisons
				chadd(user: User, up: int, op: int): 
					allows for incremental permisons changes
					for example using chadd(someUser, 4, 0) would grant someUser read permison without changig anything else
		File:
			IMPORTANT FOR Coder400 AND slighty less for Fungus
			functions:
				write(contentToWrite):
					writes to file(text mode)
				read() -> str:
					reads file(text mode)
				append(contentToAppend:
					appends to file(text mode)

parser IS NOT INTENTED FOR NORMAL USE
it was created only to save diconary into xml format if someone would find it usesfull then it can be used but it would require modifications

savexml(diconary, path, naming, name):
	dumps diconary of tuples into XML
readxml(path):
	recreates diconary from XML fille

IMPORTANT FOR PROJECT MERGER
config.py file is used just to storing config if there will be central config file then this should use it to determine separator.



